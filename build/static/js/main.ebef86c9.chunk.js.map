{"version":3,"sources":["logo.svg","providers/MessagesProvider.tsx","providers/ProductsProvider.tsx","models/Models.tsx","providers/ColorDictionariesProvider.tsx","components/ProductCard.tsx","components/ProductsList.tsx","components/DictionarySelection.tsx","components/pages/HomePage.tsx","components/DictionaryTable.tsx","components/utilities/AlertBox.tsx","components/DictionaryList.tsx","components/utilities/BaseDialog.tsx","components/AddDictionary.tsx","components/pages/DictionariesPage.tsx","App.tsx","registerServiceWorker.tsx","index.tsx"],"names":["module","exports","__webpack_require__","p","MESSAGE_TYPE","initialState","productList","getProduct","id","removeProduct","ProductsContext","React","createContext","ProductsConsumer","Consumer","ProductsProvider","state","console","log","product","_this","find","setState","filter","_this2","this","axios","get","then","response","setTimeout","data","react_default","a","createElement","Provider","value","props","children","Component","Message","newMessage","error","Object","classCallCheck","content","colors","#00FFFF","#000000","#0000FF","#FF00FF","#808080","#008000","#00FF00","#800000","#000080","#808000","#800080","#FF0000","#C0C0C0","#008080","#FFFFFF","#FFFF00","dictionaries","dictionaryName","mutations","ColorDictionariesContext","ColorDictionariesConsumer","ColorDictionariesProvider","currentDictionary","getDictionaries","getColorDescription","hex","color","getColorList","activateDictionary","newDictionary","info","createDictionary","Promise","resolve","reject","dictionary","push","deleteDictionary","index","findIndex","undefined","splice","addDictionaryItem","from","to","updateDictionaryItem","itemkey","removeDictionaryItem","getColorMutation","hexColor","currentDictionaryObj","getActiveDictionaryObj","ProductCard","context","mutatedColorHex","className","src","alt","name","style","backgroundColor","price","ProductsList","productsList","map","el","i","key","src_components_ProductCard","DictionarySelection","Grid","Button","onClick","variant","HomePage","pageTitle","react","src_components_DictionarySelection","components_ProductsList","MessagesContext","MessagesProvider","open","message","newInfoMessage","messageToShow","newSuccessMessage","status","SUCCESS","newErrorMessage","ERROR","INFO","handleClick","handleClose","event","reason","Snackbar","anchorOrigin","vertical","horizontal","getMessageColor","autoHideDuration","onClose","ContentProps","aria-describedby","action","IconButton","aria-label","Icon","DictionaryTable","columns","title","field","lookup","onAddItem","itemKey","_this3","onUpdateItem","_this4","onRemoveItem","_this5","onDeleteDictionary","_this6","dist_default","options","actionsColumnIndex","keys","item","editable","onRowAdd","newData","onRowUpdate","oldData","updateItem","onRowDelete","removeItem","size","contextType","AlertBox","DictionaryList","results","length","src_components_DictionaryTable","components_utilities_AlertBox","BaseDialog","handleListItemClick","_this$props","other","objectWithoutProperties","Dialog","assign","maxWidth","DialogTitle","DialogContent","AddDictionary","newDictionaryName","handleClickOpen","handleOnChage","target","handleOnSubmit","e","preventDefault","onAddDictionary","Fab","components_utilities_BaseDialog","onSubmit","TextField","autoFocus","label","onChange","margin","disabled","type","DictionariesPage","components_DictionaryList","src_components_AddDictionary","App","providers_MessagesProvider","providers_ColorDictionariesProvider","providers_ProductsProvider","react_router_dom","basename","href","logo","exact","activeClassName","react_router","path","component","PureComponent","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ebef86c9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react'\nimport Snackbar from '@material-ui/core/Snackbar';\nimport IconButton from '@material-ui/core/IconButton';\nimport { Icon } from '@material-ui/core';\n\ninterface AppState {\n    open: boolean;\n    message: string,\n    newInfoMessage(messageToShow: string): void;\n    newSuccessMessage(messageToShow: string): void;\n    newErrorMessage(messageToShow: string): void;\n    status: MESSAGE_TYPE;\n};\n\nenum MESSAGE_TYPE {\n    INFO,\n    SUCCESS,\n    ERROR\n}\n\nconst TOAST_DURATION = 2000;\n\nexport const MessagesContext = React.createContext({} as AppState);\n\n// Create an exportable consumer that can be injected into components\nexport const MessagesConsumer = MessagesContext.Consumer;\n\n/***\n * MessagesProvider allows to show Snackbar messages.\n */\nclass MessagesProvider<Object, AppState> extends Component {\n\n    state = {\n        open: false,\n        message: 'default',\n        newInfoMessage: (messageToShow: string) => {\n            this.setState({ open: true, message: messageToShow });\n        },\n        newSuccessMessage: (messageToShow: string) => {\n            this.setState({ open: true, message: messageToShow, status: MESSAGE_TYPE.SUCCESS });\n        },\n        newErrorMessage: (messageToShow: string) => {\n            this.setState({ open: true, message: messageToShow, status: MESSAGE_TYPE.ERROR });\n        },\n        status: MESSAGE_TYPE.INFO\n    };\n\n    getMessageColor(status: MESSAGE_TYPE):string {\n        switch (status) {\n            case MESSAGE_TYPE.INFO:\n                return 'message-info';\n            case MESSAGE_TYPE.SUCCESS:\n                return 'message-success';\n            case MESSAGE_TYPE.ERROR:\n                return 'message-error';\n            default:\n                return 'message-info';\n        }\n    }\n\n    handleClick = () => {\n        this.setState({ open: true });\n    };\n\n    handleClose = (event: React.SyntheticEvent | React.MouseEvent, reason?: string) => {\n        if (reason === 'clickaway') {\n            return;\n        }\n        this.setState({ open: false });\n    }\n\n    render() {\n        return (\n            <MessagesContext.Provider value={this.state}>\n                <Snackbar\n                    anchorOrigin={{\n                        vertical: 'bottom',\n                        horizontal: 'left',\n                    }}\n                    className={this.getMessageColor(this.state.status)}\n                    open={this.state.open}\n                    autoHideDuration={TOAST_DURATION}\n                    onClose={this.handleClose}\n                    ContentProps={{\n                        'aria-describedby': 'message-id',\n                    }}\n                    message={<span id=\"message-id\">{this.state.message}</span>}\n                    action={[\n                        <IconButton\n                            key=\"close\"\n                            aria-label=\"Close\"\n                            color=\"inherit\"\n                            className=\"class_status\"\n                            onClick={this.handleClose}\n                        ><Icon>close</Icon>\n                        </IconButton>,\n                    ]}\n                />\n                {this.props.children}\n            </MessagesContext.Provider>\n        )\n    }\n}\nexport default MessagesProvider;\n\n","import React, { Component } from 'react'\nimport axios from 'axios';\nimport { Product } from '../models/Models';\n\ninterface AppState {\n    productList: Product[],\n    getProduct(id: number): Product | null;\n    removeProduct(id:number):void;\n};\n\nconst initialState: AppState = {\n    productList: [] as Product[],\n    getProduct: (id: number) => null,\n    removeProduct: (id:number) => {}\n};\n\nexport const ProductsContext = React.createContext(initialState);\n\n// Create an exportable consumer that can be injected into components\nexport const ProductsConsumer = ProductsContext.Consumer;\n\n// Create the provider using a traditional Component class\nclass ProductsProvider extends Component {\n\n    state = {\n        productList: initialState.productList,\n        getProduct: (id: number) => {\n            console.log('context get product');\n            const product = this.state.productList.find((product: Product) => product.id === id);\n            return product ? product : null;\n        },\n       removeProduct: (id: number) => {\n            console.log('context remove product');\n            this.setState({productList: this.state.productList.filter((product:Product)=>product.id !== id)});\n        }\n    } as AppState;\n\n    /**retrieves data from server */\n    componentWillMount() {\n        axios.get('./assets/products.json').then((response) => {\n            setTimeout(() => {\n                console.log('data retrieved ', response);\n                this.setState({ productList: response.data.productList })\n            }, 500);\n        });\n    }\n\n    render() {\n        return (\n            // value prop is where we define what values \n            // that are accessible to consumer components\n            <ProductsContext.Provider value={this.state}>\n                {this.props.children}\n            </ProductsContext.Provider>\n        )\n    }\n}\nexport default ProductsProvider;","export interface Product{\n    id: number,\n    name: string,\n    brand: string,\n    color: string,\n    price: number\n}\n\nexport interface Dictionary {\n    dictionaryName: string;\n    mutations: any\n}\n\nexport interface Message{\n    content:string;\n    error?:boolean;\n}\n\nexport class Message implements Message{\n    constructor(newMessage:string, error?:boolean){\n        this.content = newMessage;\n        this.error = error;\n    }\n}","import React, { Component } from 'react'\nimport { Dictionary, Message } from 'models/Models';\n\ninterface DictionaryState {\n    // colors\n    getColorDescription(hex: string): string | null;\n    getColorMutation(hex: string): string;\n    getColorList: any;\n    // dictionaries\n    currentDictionary: string | null;\n    getDictionaries: any;\n    dictionaries: Dictionary[];\n    createDictionary: (newDictionary: string) => Promise<any>;\n    deleteDictionary: (dictionaryName: string) => Promise<any>;\n    activateDictionary: (newDictionary: string) => void;\n    // mutations\n    addDictionaryItem: (dictionaryName: string, from: string, to: string) => Promise<any>;\n    updateDictionaryItem: (dictionaryName: string, itemkey: string, from: string, to: string) => Promise<any>;\n    removeDictionaryItem: (dicitonaryName: string, itemkey: string) => Promise<any>\n};\n\nconst colors = {\n    \"#00FFFF\": \"AQUA\",\n    \"#000000\": \"BLACK\",\n    \"#0000FF\": \"BLUE\",\n    \"#FF00FF\": \"FUCHSIA\",\n    \"#808080\": \"GRAY\",\n    \"#008000\": \"GREEN\",\n    \"#00FF00\": \"LIME\",\n    \"#800000\": \"MAROON\",\n    \"#000080\": \"NAVY\",\n    \"#808000\": \"OLIVE\",\n    \"#800080\": \"PURPLE\",\n    \"#FF0000\": \"RED\",\n    \"#C0C0C0\": \"SILVER\",\n    \"#008080\": \"TEAL\",\n    \"#FFFFFF\": \"WHITE\",\n    \"#FFFF00\": \"YELLOW\"\n};\n\nconst dictionaries = [\n    {\n        dictionaryName: \"Dictionary 1\",\n        mutations: {\n            \"#008000\": \"#00FF00\",\n            \"#008080\": \"#0000FF\"\n        }\n    },\n    {\n        dictionaryName: \"Dictionary 2\",\n        mutations: {\n            \"#800080\": \"#FF00FF\",\n            \"#008000\": \"#800000\"\n        }\n    }\n]\n\n\nexport const ColorDictionariesContext = React.createContext({} as DictionaryState);\n\n// Create an exportable consumer that can be injected into components\nexport const ColorDictionariesConsumer = ColorDictionariesContext.Consumer;\n\n// Create the provider using a traditional Component class\nclass ColorDictionariesProvider extends Component {\n\n    findDictionary(dictionaryName: string): Dictionary | undefined {\n        return this.state.dictionaries.find((dictionary: Dictionary) => dictionary.dictionaryName === dictionaryName);\n    }\n    state = {\n        currentDictionary: null,\n        dictionaries: dictionaries,\n        getDictionaries: () => dictionaries,\n        getColorDescription: (hex: string) => {\n            const color = (colors as any)[hex];\n            return color ? color : null;\n        },\n        getColorList: () => {\n            return colors;\n        },\n        activateDictionary: (newDictionary: string) => {\n            console.info(\"context - activating dictionary\");\n            this.setState({ currentDictionary: this.state.currentDictionary !== newDictionary ? newDictionary : null })\n        },\n        createDictionary: (dictionaryName: string) => {\n            console.info(\"context - creating dictionary\");\n            return new Promise((resolve, reject) => {\n                let dictionary = this.state.dictionaries.find((dictionary: Dictionary) => dictionary.dictionaryName === dictionaryName) as Dictionary;\n                if (dictionary) {\n                    return reject(new Message('This dictionary already exists'));\n                }\n                const newDictionary: Dictionary = { dictionaryName: dictionaryName, mutations: {} };\n                this.state.dictionaries.push(newDictionary);\n                this.setState({ dictionaries: this.state.dictionaries });\n                resolve(new Message('Dictionary successfully added'));\n            });\n        },\n        deleteDictionary: (dictionaryName: string) => {\n            console.info('context - deleting dictionary ...');\n            return new Promise((resolve, reject) => {\n                let index = this.state.dictionaries.findIndex((dictionary: Dictionary) => dictionary.dictionaryName === dictionaryName);\n                if (index === undefined) {\n                    return reject(new Message('Dictionary does not exist'));\n                }\n                this.state.dictionaries.splice(index,1);\n                this.setState({ dictionaries: this.state.dictionaries });\n                resolve(new Message('Dictionary successfully removed'));\n            });\n        },\n\n        addDictionaryItem: (dictionaryName: string, from: string, to: string) => {\n            console.info('context - adding dictionary mutation ...');\n            return new Promise((resolve, reject) => {\n                setTimeout(() => {\n                    let dictionary = this.state.dictionaries.find((dictionary: Dictionary) => dictionary.dictionaryName === dictionaryName) as Dictionary;\n                    if (!dictionary) return reject(new Message('No dictionary found'));\n                    if (dictionary.mutations[from]) return reject(new Message('Item already present', true));\n                    if (from === to) return reject(new Message('Colors shall be different', true));\n                    dictionary.mutations[from] = to;\n                    this.setState({ dictionaries: this.state.dictionaries });\n                    resolve(new Message('Item successfully added'));\n                }, 600);\n            });\n        },\n        updateDictionaryItem: (dictionaryName: string, itemkey: string, from: string, to: string) => {\n            console.info('context - updating dictionary mutation ...');\n            return new Promise((resolve, reject) => {\n                setTimeout(() => {\n                    let dictionary = this.state.dictionaries.find((dictionary: Dictionary) => dictionary.dictionaryName === dictionaryName) as Dictionary;\n                    if (!dictionary) return reject(new Message('No dictionary found'));\n                    if (dictionary.mutations[from] && itemkey !== from) return reject(new Message('Item already present', true));\n                    if (from === to) return reject(new Message('Colors shall be different', true));\n                    delete dictionary.mutations[itemkey];\n                    dictionary.mutations[from] = to;\n                    this.setState({ dictionaries: this.state.dictionaries });\n                    resolve(new Message('Item successfully updted'));\n                }, 600);\n            })\n\n        },\n        removeDictionaryItem: (dictionaryName: string, itemkey: string) => {\n            console.info('context - removing dictionary item ...');\n            return new Promise((resolve, reject) => {\n                setTimeout(() => {\n                    let dictionary = this.state.dictionaries.find((dictionary: Dictionary) => dictionary.dictionaryName === dictionaryName) as Dictionary;\n                    if (!dictionary) return reject(new Message('No dictionary found'));\n                    delete dictionary.mutations[itemkey];\n                    this.setState({ dictionaries: this.state.dictionaries });\n                    resolve(new Message('Item successfully removed'));\n                }, 600);\n            })\n\n        },\n        getColorMutation: (hexColor: string): string => {\n            const currentDictionaryObj = this.getActiveDictionaryObj();\n            let response = hexColor;\n            if (currentDictionaryObj && currentDictionaryObj.mutations[hexColor]) {\n                response = currentDictionaryObj.mutations[hexColor];\n            }\n            return response;\n        }\n    };\n\n    // private methods and props\n    private getActiveDictionaryObj = (): Dictionary | null | undefined => {\n        if (!this.state.currentDictionary) return null;\n        return this.state.getDictionaries().find((dictionary: Dictionary) => dictionary.dictionaryName === this.state.currentDictionary);\n    };\n\n    render() {\n        return (\n            // value prop is where we define what values \n            // that are accessible to consumer components\n            <ColorDictionariesContext.Provider value={this.state}>\n                {this.props.children}\n            </ColorDictionariesContext.Provider>\n        )\n    }\n}\nexport default ColorDictionariesProvider;","import React, { Component } from 'react';\nimport './ProductCard.scss';\nimport { Product } from '../models/Models';\nimport { ColorDictionariesContext } from 'providers/ColorDictionariesProvider';\n\nexport interface IProductCardProps {\n    product: Product;\n}\n\nclass ProductCard extends Component<IProductCardProps> {\n\n    render() {\n\n        const {product} = this.props;\n        return (\n            <ColorDictionariesContext.Consumer>\n                {(context) => {\n                    const mutatedColorHex = context.getColorMutation(product.color);\n\n                    return (\n                        <div className=\"card\">\n                            <div className=\"card-image\">\n                                <img src=\"./assets/img/iphone.jpg\" alt=\"smartphone\"/>\n                                <span className=\"card-title\">{product.name}</span>\n                            </div>\n                            <div className=\"card-content\" style={{ backgroundColor: mutatedColorHex }}>\n                                <div className=\"product-color-description\">{context.getColorDescription(mutatedColorHex)}</div>\n                                <div className=\"product-price\">CHF&nbsp;{product.price}</div>\n                            </div>\n                        </div>\n                    )\n                }}\n\n            </ColorDictionariesContext.Consumer>\n        );\n    }\n}\nexport default ProductCard;\n\n","import React, { Component } from 'react';\nimport ProductCard from './ProductCard';\nimport { Product } from 'models/Models';\n\nexport interface IProductsListProps {\n  productsList: Product[];\n  // onRemoveItem: (id: number) => void\n}\n\nclass ProductsList extends Component<IProductsListProps> {\n\n  render() {\n    const { productsList } = this.props;\n\n    return (\n        <div className=\"row\">\n          {productsList.map((el, i) =>\n            <div className=\"col s12 m4\" key={i}>\n              <ProductCard product={el}></ProductCard>\n            </div>\n          )}\n        </div>\n    );\n  }\n}\nexport default ProductsList;","import React, { Component } from 'react';\nimport { ColorDictionariesConsumer } from '../providers/ColorDictionariesProvider';\nimport { Grid, Button } from '@material-ui/core';\nimport './DictionarySelection.scss';\n\nclass DictionarySelection extends Component {\n\n  render() {\n    return (\n      <ColorDictionariesConsumer>\n        {(context) => {\n\n          function handleClick(newDictionary: string) {\n            context.activateDictionary(newDictionary);\n          }\n          return (\n            <Grid className=\"text-center dictionary-list-selection\">\n              {context.getDictionaries().map((el: any, i: number) =>\n                  <Button key={i} onClick={() => handleClick(el.dictionaryName)} variant=\"contained\" className={(el.dictionaryName === context.currentDictionary)?'primary-btn': 'dictionary-default'} >\n                    {el.dictionaryName}\n                  </Button>\n              )}\n            </Grid>\n          )\n        }}\n      </ColorDictionariesConsumer>\n    );\n  }\n}\nexport default DictionarySelection;","\nimport React, { Component, Fragment } from 'react';\nimport { ProductsConsumer } from 'providers/ProductsProvider';\nimport ProductsList from '../ProductsList';\nimport DictionarySelection from '../DictionarySelection';\n\ninterface IHomeState{\n    pageTitle:string;\n}\n\nclass HomePage extends Component<object,IHomeState> {\n\n    state = {\n        pageTitle: 'Product Store Backoffice'\n    }\n\n    render() {\n        return (\n            <ProductsConsumer>\n                {(context) => {\n                    return (\n                        <Fragment>\n                            <div className=\"page-title\">{this.state.pageTitle}</div>\n                            <DictionarySelection></DictionarySelection>\n                            <ProductsList productsList={context.productList}></ProductsList>\n                        </Fragment>\n                    )\n                }}\n            </ProductsConsumer>\n        )\n    }\n}\n\nexport default HomePage;","import React, { Component } from 'react';\nimport { Dictionary, Message } from '../models/Models';\n\nimport MaterialTable, { Column } from 'material-table';\nimport { MessagesContext } from 'providers/MessagesProvider';\nimport './DictionaryTable.scss';\nimport { Button, Icon } from '@material-ui/core';\n\ninterface IDictionaryTableParams {\n    dictionary: Dictionary;\n    colors: any[];\n    onAddItem: (dictionaryName: string, from: string, to: string) => Promise<Message>;\n    onUpdateItem: (dictionaryName: string, itemkey: string, from: string, to: string) => Promise<Message>;\n    onRemoveItem: (dictionaryName: string, itemkey: string) => Promise<Message>;\n    onDeleteDictionary: (dictionaryName: string) => Promise<Message>;\n}\n\nclass DictionaryTable extends Component<IDictionaryTableParams> {\n    static contextType = MessagesContext;\n\n    columns = [\n        { title: 'from', field: 'from', lookup: this.props.colors },\n        { title: 'to', field: 'to', lookup: this.props.colors },\n\n    ] as Column[];\n\n    addDictionaryItem(dictionaryName: string, from: string, to: string) {\n        return this.props.onAddItem(dictionaryName, from, to).then((response) => {\n            this.context.newSuccessMessage(response.content);\n        }, (error) => {\n            this.context.newErrorMessage(error.content);\n        });\n    }\n\n    updateItem(dictionaryName: string, itemKey: string, from: string, to: string) {\n        return this.props.onUpdateItem(dictionaryName, itemKey, from, to).then((response) => {\n            this.context.newSuccessMessage(response.content);\n        }, (error) => {\n            this.context.newErrorMessage(error.content);\n        });\n    }\n\n    removeItem(dictionaryName: string, itemKey: string) {\n        return this.props.onRemoveItem(dictionaryName, itemKey).then((response) => {\n            this.context.newSuccessMessage(response.content);\n        }, (error) => {\n            this.context.newErrorMessage(error.content);\n        });\n    }\n\n    deleteDictionary() {\n        return this.props.onDeleteDictionary(this.props.dictionary.dictionaryName).then((response) => {\n            this.context.newSuccessMessage(response.content);\n        }, (error) => {\n            this.context.newErrorMessage(error.content);\n        });\n    }\n    render() {\n\n        return (\n            <div className=\"dictionary-table\">\n                <MaterialTable\n                    title={this.props.dictionary.dictionaryName}\n                    columns={this.columns}\n                    options={{\n                        actionsColumnIndex: -1\n                    }}\n                    data={Object.keys(this.props.dictionary.mutations).map((item) => {\n                        return {\n                            from: item,\n                            to: this.props.dictionary.mutations[item]\n                        }\n                    })}\n                    editable={{\n                        onRowAdd: newData => this.addDictionaryItem(this.props.dictionary.dictionaryName, newData.from, newData.to),\n                        onRowUpdate: (newData, oldData) => this.updateItem(this.props.dictionary.dictionaryName, oldData.from, newData.from, newData.to),\n                        onRowDelete: oldData =>\n                            this.removeItem(this.props.dictionary.dictionaryName, oldData.from)\n                    }}\n                />\n                <div className=\"remove-dictionary\">\n                    <Button variant=\"contained\" size=\"small\" onClick={()=>this.deleteDictionary()} className=\"warning-btn\">\n                        <Icon>delete</Icon>\n                        Delete\n                    </Button>\n                </div>\n            </div>\n        );\n    }\n}\nexport default DictionaryTable;\n\n\n\n","import React, { Component } from 'react';\nimport './AlertBox.scss';\n\ninterface IAlertBoxProps {\n  message: string;\n}\nclass AlertBox extends Component<IAlertBoxProps>{\n\n  render() {\n    const { message } = this.props;\n\n    return (\n      <p className=\"alert-box\">\n        {message}\n      </p>\n    )\n  }\n}\nexport default AlertBox;","import React, { Component } from 'react';\nimport DictionaryTable from './DictionaryTable';\nimport { ColorDictionariesConsumer } from 'providers/ColorDictionariesProvider';\nimport AlertBox from './utilities/AlertBox';\n\nclass DictionaryList extends Component {\n\n  render() {\n\n    return (\n      <ColorDictionariesConsumer>\n        {(context) => {\n          let results;\n          if (context.getDictionaries().length > 0) {\n            results = context.getDictionaries().map((el: any, i: number) =>\n              <div className=\"col s12 m4 margin-md-bottom\" key={i}>\n                <DictionaryTable dictionary={el} colors={context.getColorList()} onDeleteDictionary={context.deleteDictionary} onAddItem={context.addDictionaryItem} onUpdateItem={context.updateDictionaryItem} onRemoveItem={context.removeDictionaryItem}></DictionaryTable>\n              </div>\n            )\n          } else {\n            results = <AlertBox message=\"No item found\"></AlertBox>\n          }\n          return (\n            <div className=\"row\">\n              {results}\n            </div>\n          )\n        }}\n      </ColorDictionariesConsumer>\n    );\n  }\n}\nexport default DictionaryList;","import React, { Component } from 'react';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport { DialogContent, Icon } from '@material-ui/core';\r\nimport './BaseDialog.scss';\r\n\r\ninterface IBaseDialogProps {\r\n  title: string;\r\n  open: boolean;\r\n  onClose(): void;\r\n}\r\n\r\nclass BaseDialog extends Component<IBaseDialogProps> {\r\n\r\n  handleClose = () => {\r\n    this.props.onClose();\r\n  }\r\n\r\n  handleListItemClick = (value: any) => {\r\n    this.props.onClose();\r\n  }\r\n\r\n  render() {\r\n    const { onClose, title, ...other } = this.props;\r\n\r\n    return (\r\n      <Dialog maxWidth=\"sm\" className=\"full-width\" onClose={this.handleClose} {...other}>\r\n        <DialogTitle className='modal-title'>{title}<Icon className=\"modal-btn-close\" onClick={()=>{this.handleClose()}}>close</Icon></DialogTitle>\r\n        <DialogContent>\r\n          {this.props.children}\r\n        </DialogContent>\r\n      </Dialog>\r\n    );\r\n  }\r\n}\r\n\r\nexport default BaseDialog;","import React, { Component, Fragment, FormEvent } from 'react';\nimport { Fab, Icon, TextField } from '@material-ui/core';\nimport Button from '@material-ui/core/Button';\nimport './AddDictionary.scss';\nimport { MessagesContext } from 'providers/MessagesProvider';\nimport BaseDialog from './utilities/BaseDialog';\n\ninterface IAddDictionaryParams {\n  onAddDictionary: (newDictionaryName: string) => Promise<any>\n}\n\ninterface IComponentState {\n  open: boolean;\n  newDictionaryName: string;\n}\n\nclass AddDictionary extends Component<IAddDictionaryParams, IComponentState> {\n\n  static contextType = MessagesContext;\n\n  state: IComponentState = {\n    open: false,\n    newDictionaryName: ''\n  }\n\n  handleClickOpen = () => {\n    this.setState({ newDictionaryName: '',open: true });\n  }\n\n  handleClose = () => {\n    this.setState({ open: false });\n  };\n\n  handleOnChage = (event: React.ChangeEvent<HTMLInputElement>) => {\n    this.setState({ newDictionaryName: event.target.value });\n  }\n\n  handleOnSubmit = (e:React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    this.props.onAddDictionary(this.state.newDictionaryName).then((response) => {\n      this.context.newSuccessMessage(response.content);\n      this.handleClose();\n    }, (error) => {\n      this.context.newErrorMessage(error.content);\n    });\n  }\n  \n  render() {\n    return (\n      <Fragment>\n        <Fab color=\"primary\" className=\"plusButton primary-btn\" onClick={this.handleClickOpen} aria-label=\"Add\">\n          <Icon>add_icon</Icon>\n        </Fab>\n        <BaseDialog title='add new dictionary' open={this.state.open} onClose={this.handleClose} >\n          \n        <form onSubmit={(e) => this.handleOnSubmit(e)}>\n        <div className=\"row\">\n            <TextField\n              autoFocus\n              className=\"full-width\"\n              label=\"Dictionary Name\"\n              value={this.state.newDictionaryName}\n              onChange={this.handleOnChage}\n              margin=\"normal\"\n              variant=\"outlined\"\n            />\n          </div>\n          <div className=\"row\">\n            <Button variant=\"contained\" disabled={!this.state.newDictionaryName} type=\"submit\" className=\"primary-btn no-margin\">Add</Button>\n          </div>\n\n        </form>\n        </BaseDialog>\n      </Fragment>\n    )\n  }\n}\nexport default AddDictionary;","import React, { Component, Fragment} from 'react';\nimport { ColorDictionariesConsumer } from 'providers/ColorDictionariesProvider';\nimport DictionaryList from 'components/DictionaryList';\nimport AddDictionary from 'components/AddDictionary';\n\nclass DictionariesPage extends Component {\n\n    state ={\n        pageTitle:'Available Dictionaries'\n    }\n    render() {\n        return (\n            <ColorDictionariesConsumer>\n            {(context) => {\n                return (\n                    <Fragment>\n                        <div className=\"page-title\">{this.state.pageTitle}</div>\n                        <DictionaryList></DictionaryList>\n                        <AddDictionary onAddDictionary={context.createDictionary}></AddDictionary>\n                    </Fragment>\n                )\n            }}\n        </ColorDictionariesConsumer>\n        )\n    }\n\n}\n\n\nexport default DictionariesPage;","import React, { PureComponent } from 'react';\nimport './App.scss';\nimport logo from './logo.svg';\n\nimport { Route, NavLink, BrowserRouter } from 'react-router-dom';\nimport HomePage from 'components/pages/HomePage';\nimport ProductsProvider from 'providers/ProductsProvider';\nimport DictionariesPage from 'components/pages/DictionariesPage';\nimport ColorDictionariesProvider from './providers/ColorDictionariesProvider';\nimport MessagesProvider from 'providers/MessagesProvider';\nclass App extends PureComponent {\n\n  render() {\n    return (\n      <MessagesProvider>\n        <ColorDictionariesProvider>\n          <ProductsProvider>\n            <BrowserRouter basename=\"/react-products-dictionary/build\">\n              <nav>\n                <div className=\"nav-wrapper\">\n                  <a href=\"#!\" className=\"brand-logo center\"><img src={logo} className=\"app-logo\" alt=\"logo\" /></a>\n                  <ul className=\"left\">\n                    <li><NavLink exact={true} activeClassName='active' to='/'>Home</NavLink></li>\n                    <li><NavLink exact={true} activeClassName='active' to='/dictionaries'>Dictionaries</NavLink></li>\n                  </ul>\n                </div>\n              </nav>\n              <div className=\"app-container\">\n                <Route exact path=\"/\" component={HomePage} />\n                <Route path=\"/dictionaries\" component={DictionariesPage} />\n              </div>\n            </BrowserRouter>\n          </ProductsProvider>\n        </ColorDictionariesProvider>\n      </MessagesProvider>\n    );\n  }\n}\n\nexport default App;\n","/* istanbul ignore file */\n\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './registerServiceWorker';\n\nReactDOM.render(<App/>, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}